set nocompatible

colorscheme badwolf

filetype plugin on
syntax on

set visualbell
set noerrorbells

set tabstop=2
set softtabstop=2
set shiftwidth=2

set backspace=indent,eol,start

set expandtab
set number
set relativenumber

set re=1

" Remap C-c to Esc to trigger InsertLeave
inoremap <C-c> <Esc>

augroup numbertoggle
  autocmd!
  autocmd BufEnter,FocusGained,InsertLeave * set relativenumber
  autocmd BufLeave,FocusLost,InsertEnter   * set norelativenumber
augroup END

set showcmd
set cursorline

set showmatch

set incsearch
set hlsearch

set smartindent
set autoindent

set splitright
set splitbelow

filetype indent on

noremap <Up> <NOP>
noremap <Down> <NOP>
noremap <Left> <NOP>
noremap <Right> <NOP>

inoremap <Up> <NOP>
inoremap <Down> <NOP>
inoremap <Left> <NOP>
inoremap <Right> <NOP>

nnoremap <leader>ev :vsp $MYVIMRC<CR>
nnoremap <leader>sv :source $MYVIMRC<CR>

nnoremap <leader>t :call RunCurrentSpecFile()<CR>
nnoremap <leader>s :call RunNearestSpec()<CR>
nnoremap <leader>l :call runLastSpec()<CR>
nnoremap <leader>a :call RunAllSpecs()<CR>

let g:rspec_command = "Dispatch rspec {spec}"
let $FZF_DEFAULT_COMMAND = 'ag --hidden --ignore node_modules -i -f -g ""'
let $FZF_DEFAULT_OPTS = '-i'
let g:ackprg = 'ag --ignore node_modules -f --vimgrep -i'
nnoremap <leader>; :AV<CR>

nnoremap <C-p> :Files<CR>
nnoremap <C-@> :BLine<CR>
" remove trailing spaces on specific filetypes
autocmd FileType html,rake,slim,coffee,javascript,ruby,vue,sass,scss,yml,tf,stylus,go autocmd BufWritePre <buffer> %s/\s\+$//e

augroup filetypedetect
  au BufRead,BufNewFile *.axlsx setfiletype ruby
  au BufRead,BufNewFile *.jb setfiletype ruby
augroup END

autocmd FileType vue syntax sync fromstart

set colorcolumn=80

set rtp+=/usr/local/opt/fzf

let g:slime_target = "tmux"

set clipboard=unnamed

let g:ale_sign_column_always = 1
let g:ale_linter_aliases = {'vue': ['vue', 'javascript']}
let g:ale_linters = {'vue': ['eslint', 'vls']}
let g:ale_lint_on_text_changed = 'never'

let g:ale_ruby_rubocop_executable = 'rubocop'

let g:ruby_indent_assignment_style = 'variable'

nmap <silent> <leader>lj :ALENext<cr>
nmap <silent> <leader>lk :ALEPrevious<cr>

map <leader>fj <Esc>:%!jq '.'<CR>

" Ctags stuff
" let g:auto_ctags = 1

" let g:tagbar_type_ruby = {
"     \ 'kinds' : [
"         \ 'm:modules',
"         \ 'c:classes',
"         \ 'd:describes',
"         \ 'C:contexts',
"         \ 'f:methods',
"         \ 'F:singleton methods'
"     \ ]
" \ }

" nnoremap <silent> <Leader>b :TagbarToggle<CR>

" Omnicompletion
set omnifunc=syntaxcomplete#Complete

" coc.vim configuration
set signcolumn=number

inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Make <CR> auto-select the first completion item and notify coc.nvim to
" format on enter, <cr> could be remapped by other vim plugin
inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction

autocmd CursorHold * silent call CocActionAsync('highlight')

" Disable Ex Mode
nnoremap Q <Nop>

let g:fzf_layout = { 'down': '40%' }

nmap <leader><leader><leader><leader><leader><leader>l <Plug>NetrwRefresh
