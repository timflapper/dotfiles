set nocompatible

function! IsWSL()
  if isdirectory('/mnt/c/Windows')
    let lines = readfile("/proc/version")
    if lines[0] =~ "Microsoft"
      return 1
    endif
  endif
  return 0
endfunction

colorscheme badwolf

filetype plugin on
syntax on

set visualbell
set noerrorbells

set tabstop=2
set softtabstop=2
set shiftwidth=2

set backspace=indent,eol,start

set expandtab
set number
set relativenumber

set re=1

" Remap C-c to Esc to trigger InsertLeave
inoremap <C-c> <Esc>

augroup numbertoggle
  autocmd!
  autocmd BufEnter,FocusGained,InsertLeave * set relativenumber
  autocmd BufLeave,FocusLost,InsertEnter   * set norelativenumber
augroup END

set showcmd
set cursorline

set showmatch

set incsearch
set hlsearch

set smartindent
set autoindent

set splitright
set splitbelow

filetype indent on

" Stop Found a swap file message
set shortmess=A

noremap <Up> <NOP>
noremap <Down> <NOP>
noremap <Left> <NOP>
noremap <Right> <NOP>

inoremap <Up> <NOP>
inoremap <Down> <NOP>
inoremap <Left> <NOP>
inoremap <Right> <NOP>

nnoremap <leader>ev :vsp $MYVIMRC<CR>
nnoremap <leader>sv :source $MYVIMRC<CR>

nmap <silent> <leader>t :TestNearest<CR>
nmap <silent> <leader>T :TestFile<CR>
nmap <silent> <leader>a :TestSuite<CR>
nmap <silent> <leader>l :TestLast<CR>
nmap <silent> <leader>g :TestVisit<CR>

let test#strategy = "vimterminal"

let $FZF_DEFAULT_COMMAND = 'ag --hidden --ignore node_modules -i -f -g ""'
let $FZF_DEFAULT_OPTS = '-i'
let g:ackprg = 'ag --ignore node_modules -f --vimgrep'
nnoremap <leader>; :AV<CR>

nnoremap <C-p> :Files<CR>
nnoremap <C-@> :BLine<CR>
" remove trailing spaces on specific filetypes
autocmd FileType html,rake,slim,coffee,javascript,ruby,vue,sass,scss,yml,tf,stylus,go autocmd BufWritePre <buffer> %s/\s\+$//e

augroup filetypedetect
  au BufRead,BufNewFile *.axlsx setfiletype ruby
  au BufRead,BufNewFile *.jb setfiletype ruby
augroup END

autocmd FileType vue syntax sync fromstart

set colorcolumn=80

set rtp+=/usr/local/opt/fzf

let g:slime_target = "tmux"

set clipboard+=unnamed

map <leader>fj <Esc>:%!jq '.'<CR>

" coc.vim configuration
set signcolumn=yes

inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction

autocmd CursorHold * silent call CocActionAsync('highlight')

" Disable Ex Mode
nnoremap Q <Nop>

let g:fzf_layout = { 'down': '40%' }

nmap <leader><leader><leader><leader><leader><leader>l <Plug>NetrwRefresh

if IsWSL()
  let g:OmniSharp_translate_cygwin_wsl = 1

  autocmd TextYankPost * call system('win32yank.exe -i --crlf', @")

  function! Paste(mode)
      let @" = system('win32yank.exe -o --lf')
      return a:mode
  endfunction

  map <expr> p Paste('p')
  map <expr> P Paste('P')
else
  let g:OmniSharp_server_use_mono = 1
endif

augroup ObsessionGroup
  autocmd!
  " When opening a file, start recording the Vim session with its tabs and splits.
  " If Vim is called without arguments and there is already a session file,
  " source it and record the session.
  " Checking 'modified' avoids recording a session when reading from stdin.
  " From https://github.com/tpope/vim-obsession/issues/17
  " !argc() makes sure we only source a session file if Vim was started without arguments.
  " Otherwise we would open an old session instead of opening a file when calling 'vim my_file'.
  " Calling Obsession when the session is being recorded would pause the recording,
  " that's why we check if v:this_session is empty.
  autocmd VimEnter * nested
      \ if !&modified |
      \   if !argc() && filereadable('Session.vim') |
      \   source Session.vim |
      \   echo "Existing session sourced, recording session" |
      \   elseif empty(v:this_session) |
      \     Obsession |
      \     echo "Started new session" |
      \   endif |
      \ endif
augroup END
